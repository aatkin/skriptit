(ns skriptit.rems
  (:require [babashka.process :refer [shell]]
            [clojure.string :as str]
            [skriptit.cli :refer [shell*]]
            [skriptit.utils :as utils]))

;; code generated by ChatGPT v3.5. incredible times
(defn- rems-tag
  "Print commands for creating git tag with release number from current changelog."
  {:skriptit/cmd "tag"}
  [_cli-args]
  (let [changelog (slurp "CHANGELOG.md")
        release-version (second (re-find #"## (v[\d.]+)" changelog))
        release-name (second (re-find #"## v[\d.]+ \"([^\"]+)\"" changelog))
        tag-command (str "git tag -a " release-version
                         " -m \"Release " release-version
                         ", \\\"" release-name "\\\"\"")]
    (println tag-command)))

(defn- release-branch
  "Print CLI commands for doing REMS release."
  {:skriptit/cmd "release"}
  [& _cli-args]
  (let [version (-> (shell {:out :string}
                           "git describe"
                           "--tags"
                           "--abbrev=0")
                    :out
                    str/split-lines
                    first)
        major (->> version (re-find #"v[\d].+") second utils/parse-int)
        minor (->> version (re-find #"v\d\.(.+)") second utils/parse-int inc)
        branch (str "release-" major "." minor)]
    (println (pr-str {:current version
                      :next (str "v" major "." minor)}))
    (println "create branch:" branch)))

(defn- rems-db
  "Start postgres:13 container with existing volume for rems-dev local database."
  {:skriptit/cmd "db"
   :skriptit/args "[volume]"}
  [& cli-args]
  (let [volume (or (first cli-args)
                   (System/getenv "REMS_DB_DOCKER_VOLUME"))]
    (assert (not (str/blank? volume)) "volume cannot be empty")
    (shell* "docker run"
            "--rm"
            "--name" "rems_test"
            "-v" (str volume ":/var/lib/postgresql/data")
            "-p" "127.0.0.1:5432:5432"
            "-d"
            "-e" "POSTGRES_HOST_AUTH_METHOD=trust"
            "postgres:13")))

(defn quote-vec [& args]
  (str "[" (str/join " " (remove nil? args)) "]"))

(defn quote-str [s]
  (str "\"" s "\""))

(defn lein-dep [dependency & [version]]
  (quote-vec dependency
             (some-> version quote-str)))

;; XXX: this could be generic (leiningen) script to add nREPL dependencies?
(defn- rems-dev
  "Start REMS dev process with nREPL. Does not automatically load any REMS namespaces (e.g. no server startup)."
  {:skriptit/cmd "dev"
   :skriptit/args "[& extra-profiles]"}
  [& extra-profiles]
  (let [deps-nrepl ["update-in" :dependencies
                    "conj" (lein-dep "nrepl" "1.0.0")]
        plugins ["update-in" :plugins
                 "conj" (lein-dep "cider/cider-nrepl" "0.28.5")]
        repl-cider ["update-in" (quote-vec :repl-options :nrepl-middleware)
                    "conj" (lein-dep "cider.nrepl/cider-middleware")]
        profiles (->> extra-profiles
                      (into ["+dev"]) #_"+portal" #_"+snitch"
                      (str/join ","))
        cmd ["trampoline" "with-profile" profiles "repl" :headless]]
    (apply shell* "lein" (->> (list deps-nrepl plugins repl-cider cmd)
                              (interpose ["--"])
                              (flatten)))))

(defn- rems-shadow
  "Start shadow-cljs watcher for REMS front-end."
  {:skriptit/cmd "shadow"}
  [& _cli-args]
  (let [repl-options ["-d" "cider/cider-nrepl:0.28.5"]
        cmd ["npx" "shadow-cljs" repl-options "watch" ":app"]]
    (apply shell* (flatten cmd))))

(defn- args-plus-keywords [coll]
  (->> coll
       (mapcat (juxt identity (partial str ":")))))

(defn- rems-test
  "Run REMS tests with karma (frontend) or kaocha (backend) test runner."
  {:skriptit/cmd "test"
   :skriptit/args "target [& args]"}
  [target & args]
  (let [target= (fn [& xs]
                  (some #{target} (args-plus-keywords xs)))
        args= (fn [x]
                (some #{x} args))]
    (cond
      (and (target= "shadow")
           (args= "compile"))
      (do
        (shell* "npx shadow-cljs compile cljs-test")
        (shell* "npx karma start"))

      (target= "shadow")
      (shell* "npx karma start")

      (target= "browser")
      (println "TODO")

      :else
      (let [cmd ["lein" #_"trampoline" "kaocha"] ; XXX: trampoline does not seem to help?
            watch (when (some #{"watch"} args)
                    ["--watch"
                     "--fail-fast"])
            opts (cond
                   (target= "integration" "unit") [watch
                                                   ["--reporter" "kaocha.report/documentation" target]]
                   (str/starts-with? target ":feat/") [watch
                                                       ["--focus-meta" target]]
                   :else ["--watch"
                          "--fail-fast"
                          ["--focus" target]])]
        (shell* (flatten (list cmd opts)))))))

(def commands
  (list #'rems-db
        #'rems-dev
        #'release-branch
        #'rems-shadow
        #'rems-test
        #'rems-tag))
