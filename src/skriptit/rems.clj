(ns skriptit.rems
  (:require [babashka.http-client :as http]
            [babashka.process :refer [shell]]
            [clojure.string :as str]
            [skriptit.cli :refer [shell*]]
            [skriptit.utils :as utils]))

;; code generated by ChatGPT v3.5. incredible times
(defn- rems-tag
  "Print commands for creating git tag with release number from current changelog."
  {:skriptit/cmd "tag"}
  [& _cli-args]
  (let [changelog (slurp "CHANGELOG.md")
        release-version (second (re-find #"## (v[\d.]+)" changelog))
        release-name (second (re-find #"## v[\d.]+ \"([^\"]+)\"" changelog))
        tag-command (str "git tag -a " release-version
                         " -m \"Release " release-version
                         ", \\\"" release-name "\\\"\"")]
    (println tag-command)))

(defn- release-branch
  "Print CLI commands for doing REMS release."
  {:skriptit/cmd "release"}
  [& _cli-args]
  (let [version (-> (shell {:out :string}
                           "git describe"
                           "--tags"
                           "--abbrev=0")
                    :out
                    str/split-lines
                    first)
        major (->> version (re-find #"v[\d].+") second utils/parse-int)
        minor (->> version (re-find #"v\d\.(.+)") second utils/parse-int inc)
        branch (str "release-" major "." minor)]
    (println (pr-str {:current version
                      :next (str "v" major "." minor)}))
    (println "create branch:" branch)))

;; #!/bin/bash
;; docker run --rm --name rems_test -p 127.0.0.1:5432:5432 -d -e POSTGRES_HOST_AUTH_METHOD=trust postgres:13
;; docker run --rm --link rems_test postgres:13 /bin/bash -c "while ! psql -h rems_test -U postgres -c 'select 1;' 2>/dev/null; do sleep 1; done"
;; docker run -i --rm --link rems_test postgres:13 psql -h rems_test -U postgres < resources/sql/init.sql

;; ARGS="run dev-setup"

;; # optionally run perf test data
;; if [ "$1" == "perf" ]; then
;;     ARGS="run perf-setup"
;; fi

;; echo "lein $ARGS"
;; lein $ARGS

(defn- docker-volumes
  "Columns: `[driver volume-name]`"
  []
  (->> (shell {:out :string} "docker volume ls")
       :out
       str/split-lines
       (map #(str/split % #"[\s]{2,}"))))

(defn- volume-exists? [volume-name]
  (let [volumes (->> (docker-volumes)
                     (into #{} (map second)))]
    (contains? volumes volume-name)))

(defn- docker-containers
  "Columns: `[container-id image command created status ports names]`
   
   Opts:
   - `:all?` (optional) Show all containers (default shows just running)"
  [& [{:keys [all?]}]]
  (->> (shell {:out :string}
              (cond-> "docker container ls"
                all? (str " --all")))
       :out
       str/split-lines
       (map #(str/split % #"[\s]{2,}"))))

(defn- container-exists? [container-id]
  (let [containers (->> (docker-containers {:all? true})
                        (into #{} (map last)))]
    (contains? containers container-id)))

(defn- container-running? [container-id]
  (let [containers (->> (docker-containers)
                        (into #{} (map last)))]
    (contains? containers container-id)))

(comment
  (docker-containers {:all? true})
  (container-exists? "rems_test")

  (docker-containers)
  (container-running? "rems_test"))

(def volume-name "skriptit-rems-db-volume")
(def container-id "rems_test")
(def container-hostname "rems_test")
(def postgres-image "postgres:13")
(def db-init-script
  (delay
    (:body (http/get "https://raw.githubusercontent.com/CSCfi/rems/master/resources/sql/init.sql"))))

(defn- rems-db
  "Start postgres:13 container for rems-dev local database. Creates new volume if not exists."
  {:skriptit/cmd "db"}
  [& _cli-args]
  (when-not (volume-exists? volume-name)
    ;; https://docs.docker.com/reference/cli/docker/volume/create/
    ;; usage: docker volume create [OPTIONS] [VOLUME]
    (shell* "docker volume create" volume-name)
    (assert (volume-exists? volume-name)))

  ;; https://docs.docker.com/reference/cli/docker/container/create/
  ;; usage: docker container create [OPTIONS] IMAGE [COMMAND] [ARG...]
  (when-not (container-exists? container-id)
    (shell* "docker container create"
            ;; [OPTIONS]
            ;; Assign a name to the container
            "--name" container-id
            ;; Container host name
            "--hostname" container-hostname
            ;; --volume Bind mount a volume
            "-v" (str volume-name ":/var/lib/postgresql/data")
            ;; --publish Publish a container's port(s) to the host
            "-p" "127.0.0.1:5432:5432"
            ;; --env Set environment variables
            "-e" "POSTGRES_HOST_AUTH_METHOD=trust"
            ;; IMAGE
            postgres-image)
    (assert (container-exists? container-id))

    (shell* "docker container start" container-id)
    (assert (container-running? container-id))

    ;; docker run --rm --link rems_test postgres:13 /bin/bash -c "while ! psql -h rems_test -U postgres -c 'select 1;' 2>/dev/null; do sleep 1; done"
    ;; wait for postgres to start
    (shell* "docker container exec"
            ;; [OPTIONS]
            "--interactive"
            ;; CONTAINER
            container-id
            ;; COMMAND
            "/bin/bash"
            ;; [ARG...]
            "-c" (format "while ! psql -h %s -U postgres -c 'select 1;' 2>/dev/null; do sleep 1; done"
                         container-hostname))

    ;; docker run -i --rm --link rems_test postgres:13 psql -h rems_test -U postgres < resources/sql/init.sql
    (assert (not-empty @db-init-script))
    (shell* {:in @db-init-script} ; feed init script via standard input
            "docker container exec"
            ;; [OPTIONS]
            "--interactive"
            ;; CONTAINER
            container-id
            ;; COMMAND
            "psql"
            ;; [ARG...]
            "-h" container-hostname
            "-U" "postgres"
            "--echo-queries"))

  (when-not (container-running? container-id)
    (shell* "docker container restart" container-id)
    (assert (container-running? container-id)))

  (println (format "container id: %s\nvolume name: %s"
                   container-id volume-name)))

(defn quote-vec [& args]
  (str "[" (str/join " " (remove nil? args)) "]"))

(defn quote-str [s]
  (str "\"" s "\""))

(defn format-lein-dependency [dependency & [version]]
  (quote-vec dependency
             (some-> version quote-str)))

(def cli-deps
  {:nrepl {:name "nrepl"
           :url "https://github.com/nrepl/nrepl"
           :version "1.3.0"}
   :cider-nrepl {:name "cider/cider-nrepl"
                 :url "https://github.com/clojure-emacs/cider-nrepl"
                 :version "0.49.3"}})

(defn lein-dep [k]
  (let [dep (get cli-deps k)]
    (format-lein-dependency (:name dep) (:version dep))))

(defn shadow-dep [k]
  (let [dep (get cli-deps k)]
    (str (:name dep) ":" (:version dep))))

;; XXX: this could be generic (leiningen) script to add nREPL dependencies?
(defn- rems-dev
  "Start REMS dev process with nREPL. Does not automatically load any REMS namespaces (e.g. no server startup)."
  {:skriptit/cmd "dev"
   :skriptit/args "[& extra-profiles]"}
  [& extra-profiles]
  (let [plugins ["update-in" :plugins
                 "conj" (lein-dep :cider-nrepl)]
        repl-cider ["update-in" (quote-vec :repl-options :nrepl-middleware)
                    "conj" (quote-vec "cider.nrepl/cider-middleware")]
        profiles (->> extra-profiles
                      (into ["+dev"])
                      (str/join ","))
        cmd ["with-profile" profiles "repl" :headless]]
    (apply shell* "lein" (->> cmd
                              (list plugins repl-cider)
                              (interpose ["--"])
                              (flatten)))))

(defn- rems-shadow
  "Start shadow-cljs watcher for REMS front-end."
  {:skriptit/cmd "shadow"}
  [& _cli-args]
  (let [repl-options ["-d" (shadow-dep :cider-nrepl)]
        cmd ["npx" "shadow-cljs" repl-options "watch" ":app"]]
    (apply shell* (flatten cmd))))

(defn- args-plus-keywords [coll]
  (->> coll
       (mapcat (juxt identity (partial str ":")))))

(defn- rems-test
  "Run REMS tests with karma (frontend) or kaocha (backend) test runner."
  {:skriptit/cmd "test"
   :skriptit/args "target [& args]"}
  [target & args]
  (let [target= (fn [& xs]
                  (some #{target} (args-plus-keywords xs)))
        args= (fn [x]
                (some #{x} args))]
    (cond
      (and (target= "shadow")
           (args= "compile"))
      (do
        (shell* "npx shadow-cljs compile cljs-test")
        (shell* "npx karma start"))

      (target= "shadow")
      (shell* "npx karma start")

      (target= "browser")
      (println "TODO")

      :else
      (let [cmd ["lein" #_"trampoline" "kaocha"] ; XXX: trampoline does not seem to help?
            watch (when (some #{"watch"} args)
                    ["--watch"
                     "--fail-fast"])
            opts (cond
                   (target= "integration" "unit") [watch
                                                   ["--reporter" "kaocha.report/documentation" target]]
                   (str/starts-with? target ":feat/") [watch
                                                       ["--focus-meta" target]]
                   :else ["--watch"
                          "--fail-fast"
                          ["--focus" target]])]
        (shell* (flatten (list cmd opts)))))))

(def commands
  (list #'rems-db
        #'rems-dev
        #'release-branch
        #'rems-shadow
        #'rems-test
        #'rems-tag))
