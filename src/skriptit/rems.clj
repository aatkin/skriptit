(ns skriptit.rems
  (:require [babashka.process :refer [shell]]
            [clojure.string :as str]
            [skriptit.cli :refer [arg= shell* lein-dep wrap-vec]]
            [skriptit.utils :refer [parse-int]]))

;; code generated by ChatGPT v3.5. incredible times
(defn rems-tag [_cli-args]
  (let [changelog (slurp "CHANGELOG.md")
        release-version (second (re-find #"## (v[\d.]+)" changelog))
        release-name (second (re-find #"## v[\d.]+ \"([^\"]+)\"" changelog))
        tag-command (str "git tag -a " release-version
                         " -m \"Release " release-version
                         ", \\\"" release-name "\\\"\"")]
    (println tag-command)))

(defn release-branch [& _cli-args]
  (let [version (-> (shell {:out :string}
                           "git describe"
                           "--tags"
                           "--abbrev=0")
                    :out
                    str/split-lines
                    first)
        major (->> version (re-find #"v[\d].+") second parse-int)
        minor (->> version (re-find #"v\d\.(.+)") second parse-int inc)
        branch (str "release-" major "." minor)]
    (println (pr-str {:current version
                      :next (str "v" major "." minor)}))
    (println "create branch:" branch)))

;; start postgres:13 container with existing volume for rems-dev local database
(defn rems-db [& cli-args]
  (let [volume (or (first cli-args)
                   (System/getenv "REMS_DB_DOCKER_VOLUME"))]
    (assert (not (str/blank? volume)) "volume cannot be empty")
    (shell* "docker run"
            "--rm"
            "--name" "rems_test"
            "-v" (str volume ":/var/lib/postgresql/data")
            "-p" "127.0.0.1:5432:5432"
            "-d"
            "-e" "POSTGRES_HOST_AUTH_METHOD=trust"
            "postgres:13")))

;; XXX: this could be generic (leiningen) script to add nREPL dependencies?
(defn rems-dev [& _cli-args]
  (let [deps-nrepl ["update-in" :dependencies
                    "conj" (lein-dep "nrepl" "1.0.0")]
        plugins ["update-in" :plugins
                 "conj" (lein-dep "cider/cider-nrepl" "0.28.5")]
        repl-cider ["update-in" (wrap-vec :repl-options :nrepl-middleware)
                    "conj" (lein-dep "cider.nrepl/cider-middleware")]
        profiles "+dev,+portal,+snitch"
        cmd ["trampoline" "with-profile" profiles "repl" :headless]]
    (apply shell* "lein" (->> (list deps-nrepl plugins repl-cider cmd)
                              (interpose ["--"])
                              (flatten)))))

(defn rems-shadow [& _cli-args]
  (let [repl-options ["-d" "cider/cider-nrepl:0.28.5"]
        cmd ["npx" "shadow-cljs" repl-options "watch" ":app"]]
    (apply shell* (flatten cmd))))

(defn rems-test [target & args]
  (let [target= (partial arg= target)]
    (cond
      (target= "shadow")
      (do (when (some #{"compile"} args)
            (shell* "npx shadow-cljs compile cljs-test"))
          (shell* "npx karma start"))

      (target= "browser")
      (println "TODO")

      :else
      (let [cmd ["lein" "trampoline" "kaocha"]
            opts [(when (arg= "watch" args)
                    ["--watch"
                     "--fail-fast"])
                  (cond
                    (target= "integration" "unit") ["--reporter" "kaocha.report/documentation" target]
                    (str/starts-with? target ":feat/") ["--focus-meta" target]
                    :else ["--focus" target])]]
        (shell* (flatten (list cmd opts)))))))

(defn cli [cli-args]
  (let [cmd (first cli-args)
        opts (rest cli-args)]
    (case cmd
      "db" (apply rems-db opts)
      "dev" (apply rems-dev opts)
      "release" (apply release-branch opts)
      "shadow" (apply rems-shadow opts)
      "test" (apply rems-test opts)
      "tag" (apply rems-tag opts)
      (println "available commands: db dev release shadow test tag"))))
